services:

  apisix:
    container_name: apisix
    build:
      context: ./services/apisix
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - 9080:9080
    env_file:
      - ./.env
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    volumes:
      - '${PWD}/services/apisix/conf/config.yml:/usr/local/apisix/conf/config.yaml'
      - '${PWD}/services/apisix/conf/apisix.yml:/usr/local/apisix/conf/apisix.yaml'
    depends_on:
      keycloak.au.localhost:
        condition: service_healthy
    networks:
      - hapi_fhir_network

  postgres:
    container_name: postgres
    build:
      context: ./services/postgres
      dockerfile: Dockerfile
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 10s
      interval: 30s
      retries: 5
      timeout: 5s
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      # POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PASSWORD: /run/secrets/pg_password
    env_file:
      - ./.env
    secrets:
      - pg_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - hapi_fhir_network

  keycloak.au.localhost:
    container_name: keycloak.au.localhost
    build:
      context: ./services/keycloak
      dockerfile: Dockerfile

    # 'start-dev',
    # 'start',
    # '-Dauto-build',
    # '--log-level=INFO,io.vertx.ext.web.impl.RouterImpl:TRACE',

    # '-Dkeycloak.migration.action=import',
    # '-Dkeycloak.migration.provider=singleFile',
    # '-Dkeycloak.migration.realmName=hapi-fhir-dev',
    # '-Dkeycloak.migration.strategy=OVERWRITE_EXISTING',
    # '-Dkeycloak.migration.file=/import/development-realm.json',

    command:
      [
        'start',
        '-Dkeycloak.migration.action=import',
        '-Dkeycloak.migration.provider=singleFile',
        '-Dkeycloak.migration.realmName=hapi-fhir-dev',
        '-Dkeycloak.migration.strategy=OVERWRITE_EXISTING',
        '-Dkeycloak.migration.file=/import/development-realm.json',
        '--log-level=INFO,io.vertx.ext.web.impl.RouterImpl:TRACE',
      ]

    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/keycloak/health-check.sh"]
      start_period: 10s
      interval: 30s
      retries: 5
      timeout: 5s
    ports:
      - 8443:8443
      - 9000:9000
    environment:
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME}

      KC_HTTPS_CERTIFICATE_FILE: /etc/keycloak/certs/cert.pem
      KC_HTTPS_CERTIFICATE_KEY_FILE: /etc/keycloak/certs/key.pem

      KC_PROXY_HEADERS: forwarded

      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN_USERNAME}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}

      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      KC_DB_USERNAME: ${POSTGRES_USER}
      # KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_DB_PASSWORD: /run/secrets/pg_password

      KC_HEALTH_ENABLED: true
    env_file:
      - ./.env
    secrets:
      - pg_password
    # Make sure the certificate and the key (the *.pem files) have the correct permissions -> e.g., sudo chmod 655 *.pem
    volumes:
      - '${PWD}/services/keycloak/scripts/health-check.sh:/opt/keycloak/health-check.sh'
      - '${PWD}/certs/keycloak-cert.pem:/etc/keycloak/certs/cert.pem'
      - '${PWD}/certs/keycloak-key.pem:/etc/keycloak/certs/key.pem'
      - '${PWD}/certs:/opt/keycloak/conf/truststores'
      - '${PWD}:/import'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hapi_fhir_network

  hapi-fhir:
    container_name: hapi-fhir
    build:
      context: ./services/hapi-fhir
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-hapi-fhir}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: /run/secrets/pg_password
      SPRING_DATASOURCE_DRIVERCLASSNAME: org.postgresql.Driver
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: ca.uhn.fhir.jpa.model.dialect.HapiFhirPostgresDialect
    secrets:
      - pg_password
    env_file:
      - ./.env
    ports:
      - 8080:8080
    configs:
      - source: hapi
        target: /app/config/application.yaml
    depends_on:
      postgres:
        condition: service_healthy
      keycloak.au.localhost:
        condition: service_healthy
    networks:
      - hapi_fhir_network

secrets:
  pg_password:
    file: ./secrets/pg_password.txt

networks:
  hapi_fhir_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  cache:
    driver: local

configs:
  hapi:
    file: ./hapi.application.yaml
    # file: ./hapi.application-fhir-au-core-1.0.0-preview.yaml
