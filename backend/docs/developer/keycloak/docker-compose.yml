services:

  nginx:
    container_name: nginx
    build:
      context: ./services/nginx
      dockerfile: Dockerfile
    # restart: unless-stopped
    volumes:
      - '${PWD}/services/nginx/conf/ssl.conf:/etc/nginx/conf/ssl.conf'
      # - '${PWD}/services/nginx/conf/keycloak-ssl.conf:/etc/nginx/conf/keycloak-ssl.conf'
      - '${PWD}/services/nginx/conf/nginx-default.conf.template:/etc/nginx/templates/default.conf.template'
      - '${PWD}/certs:/etc/nginx/certs'
    ports:
      - 80:80
      - 443:443
    depends_on:
      - oauth2-proxy
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    networks:
      - hapi_fhir_network

  redis:
    container_name: redis
    build:
      context: ./services/redis
      dockerfile: Dockerfile
    command: --save 60 1 --loglevel warning
    # restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 10s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - cache:/data
    networks:
      - hapi_fhir_network

  postgres:
    container_name: postgres
    build:
      context: ./services/postgres
      dockerfile: Dockerfile
    # restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 10s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    env_file: ./.env
    networks:
      - hapi_fhir_network

  keycloak:
    container_name: keycloak
    build:
      context: ./services/keycloak
      dockerfile: Dockerfile
    # restart: unless-stopped
    healthcheck:
      # test: ["CMD-SHELL", "/opt/keycloak/health-check.sh"]
      test: "bash /opt/keycloak/health-check.sh"
      start_period: 10s
      interval: 30s
      retries: 5
      timeout: 5s

    # 'start-dev',
    #  'start',
    # '-Dauto-build',
    # '--log-level=INFO,io.vertx.ext.web.impl.RouterImpl:TRACE',

    # https://www.keycloak.org/server/enabletls
    # When you use a pair of matching certificate and private key files in PEM format, and you configure Keycloak to
    # use them. Keycloak creates a keystore out of these files in memory and uses this keystore afterwards.

    command:
      [
        'start',
        '--log-level=INFO,io.vertx.ext.web.impl.RouterImpl:TRACE',
        '-Dkeycloak.migration.action=import',
        '-Dkeycloak.migration.provider=singleFile',
        '-Dkeycloak.migration.realmName=hapi-fhir-dev',
        '-Dkeycloak.migration.strategy=OVERWRITE_EXISTING',
        '-Dkeycloak.migration.file=/import/development-realm.json',
      ]

    environment:

      # https://www.keycloak.org/server/hostname
      # By default, Keycloak mandates the configuration of the hostname option and does not dynamically resolve URLs.
      # This is a security measure.

      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME}
      # If KC_HOSTNAME is specified, KC_HOSTNAME_STRICT is effectively ignored
      # KC_HOSTNAME_STRICT: false

      KC_HTTPS_CERTIFICATE_FILE: /etc/x509/https/cert.pem
      KC_HTTPS_CERTIFICATE_KEY_FILE: /etc/x509/https/key.pem
      # KC_HTTPS_CERTIFICATE_FILE: /etc/x509/https/keycloak-cert.pem
      # KC_HTTPS_CERTIFICATE_KEY_FILE: /etc/x509/https/keycloak-key.pem

      KC_PROXY_HEADERS: forwarded

      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN:-admin}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-secret}

      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}

      KC_HEALTH_ENABLED: true

    env_file: ./.env
    ports:
      - 8443:8443
      - 9000:9000

    # Make sure the key and the certificate have the correct permissions -> e.g., sudo chmod 655 ./certs/*
    volumes:
      - '${PWD}/services/keycloak/scripts/health-check.sh:/opt/keycloak/health-check.sh'
      - '${PWD}/certs/keycloak-cert.pem:/etc/x509/https/cert.pem'
      - '${PWD}/certs/keycloak-key.pem:/etc/x509/https/key.pem'
      # - '${PWD}/certs/keycloak-cert.pem:/etc/x509/https/keycloak-cert.pem'
      # - '${PWD}/certs/keycloak-key.pem:/etc/x509/https/keycloak-key.pem'
      - '${PWD}/certs:/opt/keycloak/conf/truststores'
      - '${PWD}:/import'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hapi_fhir_network

  hapi-fhir:
    container_name: hapi-fhir
    build:
      context: ./services/hapi-fhir
      dockerfile: Dockerfile
    # restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-hapi-fhir}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-admin}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-secret}
      SPRING_DATASOURCE_DRIVERCLASSNAME: "org.postgresql.Driver"
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: "ca.uhn.fhir.jpa.model.dialect.HapiFhirPostgresDialect"
    env_file: ./.env
    expose:
      - 80:80
    configs:
      - source: hapi
        target: /app/config/application.yaml
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - hapi_fhir_network

  oauth2-proxy:
    container_name: oauth2-proxy
    build:
      context: ./services/oauth2-proxy
      dockerfile: Dockerfile
    # restart: unless-stopped
    # '--skip-auth-preflight=true',
    command:
      [
        '--standard-logging=true',
        '--auth-logging=true',
        '--request-logging=true',
      ]
    environment:

      # https://oauth2-proxy.github.io/oauth2-proxy/configuration/providers/openid_connect
      # https://oauth2-proxy.github.io/oauth2-proxy/configuration/providers/keycloak
      # https://oauth2-proxy.github.io/oauth2-proxy/configuration/providers/keycloak_oidc

      # https://www.keycloak.org/server/reverseproxy
      OAUTH2_PROXY_REVERSE_PROXY: true

      OAUTH2_PROXY_PROXY_HEADERS: xforwarded
      OAUTH2_PROXY_SET_AUTHORIZATION_HEADER: true
      OAUTH2_PROXY_PASS_AUTHORIZATION_HEADER: true
      OAUTH2_PROXY_SET_XAUTHREQUEST: true
      OAUTH2_PROXY_PASS_ACCESS_TOKEN: true

      # Provider config
      # OIDC discovery will fail unless a Keycloak Health Check is enabled and oauth2-proxy depends_on the keycloak
      # service being healthy.
      # OAUTH2_PROXY_SKIP_OIDC_DISCOVERY: true
      OAUTH2_PROXY_PROVIDER: oidc
      OAUTH2_PROXY_PROVIDER_DISPLAY_NAME: OpenID Connect
      # OAUTH2_PROXY_PROVIDER: keycloak
      # OAUTH2_PROXY_PROVIDER_DISPLAY_NAME: Keycloak
      # OAUTH2_PROXY_PROVIDER: keycloak-oidc
      # OAUTH2_PROXY_PROVIDER_DISPLAY_NAME: Keycloak OIDC

      # https://github.com/oauth2-proxy/oauth2-proxy/issues/2117#issue-1712501553
      # AUTH2_PROXY_OIDC_EXTRA_AUDIENCE: ${CLIENT_ID}
      OAUTH2_PROXY_OIDC_EXTRA_AUDIENCE: account

      # OAUTH2_PROXY_OIDC_ISSUER_URL: https://keycloak:8443/realms/hapi-fhir-dev
      OAUTH2_PROXY_OIDC_ISSUER_URL: ${PROTOCOL}://${KEYCLOAK_HOSTNAME}:${KEYCLOAK_PORT}/realms/${KEYCLOAK_REALM}

      OAUTH2_PROXY_CODE_CHALLENGE_METHOD: S256

      OAUTH2_PROXY_REDIRECT_URL: ${PROTOCOL}://${OAUTH2_PROXY_HOSTNAME}/oauth2/callback

      OAUTH2_PROXY_UPSTREAMS: http://hapi-fhir:8080/
      OAUTH2_PROXY_EMAIL_DOMAINS: '*'

      # OAUTH2_PROXY_SKIP_OIDC_DISCOVERY: true
      OAUTH2_PROXY_LOGIN_URL: ${PROTOCOL}://${KEYCLOAK_HOSTNAME}:${KEYCLOAK_PORT}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/auth
      OAUTH2_PROXY_REDEEM_URL: ${PROTOCOL}://${KEYCLOAK_HOSTNAME}:${KEYCLOAK_PORT}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/token
      OAUTH2_PROXY_OIDC_JWKS_URL: ${PROTOCOL}://${KEYCLOAK_HOSTNAME}:${KEYCLOAK_PORT}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/certs
      OAUTH2_PROXY_PROFILE_URL: ${PROTOCOL}://${KEYCLOAK_HOSTNAME}:${KEYCLOAK_PORT}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/userinfo
      OAUTH2_PROXY_VALIDATE_URL: ${PROTOCOL}://${KEYCLOAK_HOSTNAME}:${KEYCLOAK_PORT}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/userinfo

      # OAuth2 client configuration
      OAUTH2_PROXY_CLIENT_ID: ${CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${CLIENT_SECRET}

      OAUTH2_PROXY_SCOPE: ${SCOPE}

      # Cookie configuration
      OAUTH2_PROXY_COOKIE_NAME: ${COOKIE_NAME}
      OAUTH2_PROXY_COOKIE_SECRET: ${COOKIE_SECRET}
      # OAUTH2_PROXY_COOKIE_DOMAIN:  127.0.0.1
      # OAUTH2_PROXY_COOKIE_DOMAINS: ${OAUTH2_PROXY_HOSTNAME}:${OAUTH2_PROXY_PORT}
      # OAUTH2_PROXY_COOKIE_DOMAINS:  "*"
      # OAUTH2_PROXY_COOKIE_DOMAINS:  127.0.0.1:4180
      # OAUTH2_PROXY_COOKIE_DOMAINS:  127.0.0.1
      OAUTH2_PROXY_COOKIE_SAMESITE: lax
      OAUTH2_PROXY_COOKIE_HTTPONLY: true
      OAUTH2_PROXY_COOKIE_SECURE: false
      OAUTH2_PROXY_COOKIE_EXPIRE: 10m
      OAUTH2_PROXY_COOKIE_REFRESH: 5m
      OAUTH2_PROXY_COOKIE_CSRF_PER_REQUEST: true

      OAUTH2_PROXY_HTTP_ADDRESS: 0.0.0.0:${OAUTH2_PROXY_PORT}

      # OAUTH2_PROXY_WHITELIST_DOMAINS: .${OAUTH2_PROXY_HOSTNAME}:${OAUTH2_PROXY_PORT}
      OAUTH2_PROXY_WHITELIST_DOMAINS: ${OAUTH2_PROXY_HOSTNAME}:${OAUTH2_PROXY_PORT}
      OAUTH2_PROXY_INSECURE_OIDC_ALLOW_UNVERIFIED_EMAIL: true
      OAUTH2_PROXY_SSL_UPSTREAM_INSECURE_SKIP_VERIFY: true
      OAUTH2_PROXY_SSL_INSECURE_SKIP_VERIFY: true
      OAUTH2_PROXY_ERRORS_TO_INFO_LOG: true
      OAUTH2_PROXY_SHOW_DEBUG_ON_ERROR: true

      # https://github.com/oauth2-proxy/oauth2-proxy/issues/2890
      # OAUTH2_PROXY_SKIP_JWT_BEARER_TOKENS: true

      # OAUTH2_PROXY_SKIP_AUTH_STRIP_HEADERS: false
      # OAUTH2_PROXY_SKIP_AUTH_PREFLIGHT: true

      OAUTH2_PROXY_REQUEST_LOGGING: true

      OAUTH2_PROXY_SILENCE_PING_LOGGING: true

      # Session storage
      OAUTH2_PROXY_REDIS_CONNECTION_URL: redis://redis
      OAUTH2_PROXY_SESSION_STORE_TYPE: redis

    env_file: ./.env
    ports:
      - 4180:4180
    depends_on:
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - hapi_fhir_network

networks:
  hapi_fhir_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  cache:
    driver: local

configs:
  hapi:
    file: ./hapi.application.yaml
    # file: hapi.application-fhir-au-core-1.0.0-preview.yaml
